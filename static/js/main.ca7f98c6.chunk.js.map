{"version":3,"sources":["idi/grafico/index.js","idi/index.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","options","highcharts","constructorType","require","Highcharts","index","props","state","cols","rows","json","years","columns","selectedYear","impacto","balanza","columnsBalanza","idi1","columnsIDI1","idi2","columnsIDI2","avgT","avgP","value","tooltip","useHTML","headerFormat","pointFormat","footerFormat","followPointer","plotOptions","series","dataLabels","enabled","format","data","x","y","z","name","country","getYears","arrayYears","check","i","length","push","isMA","element","average","AppBar","position","Toolbar","Typography","variant","accept","type","id","onChange","e","file","reader","FileReader","readAsBinaryString","onload","bstr","target","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","forRows","utils","sheet_to_json","header","forWork","setState","array","j","undefined","createRows","readExcel","files","this","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","year","dataImpacto","grandTotal","parseFloat","makeImpacto","map","item","onClick","totalArray","book_new","wsAll","aoa_to_sheet","book_append_sheet","writeFile","exportImpactoExcel","TableContainer","Table","stickyHeader","size","aria-label","TableHead","TableRow","TableCell","component","TableBody","item2","index2","countries","dataBalanza","arrayCountries","getCountries","ischeck","makeBalanza","exportBalanzaExcel","maxImpacto","minImpacto","maxBalanza","minBalanza","dataTable","kgAndValueIDI1","totalP","totalT","console","log","chart","plotBorderWidth","zoomType","legend","title","text","subtitle","accessibility","point","valueDescriptionFormat","xAxis","gridLineWidth","labels","plotLines","color","dashStyle","width","label","rotation","style","fontStyle","zIndex","yAxis","startOnTick","endOnTick","maxPadding","align","makeIDI","totalArray1","totalArray2","wsAll2","exportIDIExcel","totalArray3","totalArray4","wsAll3","wsAll4","exportAllExcel","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca7f98c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nconst Chart = ({ options, highcharts }) => <HighchartsReact\r\n  highcharts={highcharts}\r\n  constructorType={'chart'}\r\n  options={options}\r\n/>\r\nexport default Chart","import React, { Component } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Highcharts from 'highcharts/highstock'\r\nimport Chart from './grafico';\r\n\r\n// Load Highcharts modules\r\nrequire('highcharts/indicators/indicators')(Highcharts)\r\nrequire('highcharts/indicators/pivot-points')(Highcharts)\r\nrequire('highcharts/indicators/macd')(Highcharts)\r\nrequire('highcharts/modules/exporting')(Highcharts)\r\nrequire('highcharts/modules/map')(Highcharts)\r\n\r\nclass index extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cols:[],\r\n            rows:[],\r\n            json:[],\r\n            years:[],\r\n            columns:[],\r\n            selectedYear:'',\r\n            impacto:[],\r\n            balanza:[],\r\n            columnsBalanza:[],\r\n            idi1:[],\r\n            columnsIDI1:[],\r\n            idi2:[],\r\n            columnsIDI2:[],\r\n            avgT : 0,\r\n            avgP : 0,\r\n            value:0,\r\n            options: {},\r\n            \r\n              tooltip: {\r\n                useHTML: true,\r\n                headerFormat: '<table>',\r\n                pointFormat: '<tr><th colspan=\"2\"><h3>{point.country}</h3></th></tr>' +\r\n                  '<tr><th>Fat intake:</th><td>{point.x}g</td></tr>' +\r\n                  '<tr><th>Sugar intake:</th><td>{point.y}g</td></tr>' +\r\n                  '<tr><th>Obesity (adults):</th><td>{point.z}%</td></tr>',\r\n                footerFormat: '</table>',\r\n                followPointer: true\r\n              },\r\n            \r\n              plotOptions: {\r\n                series: {\r\n                  dataLabels: {\r\n                    enabled: true,\r\n                    format: '{point.name}'\r\n                  }\r\n                }\r\n              },\r\n            \r\n              series: [{\r\n                data: [\r\n                  { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium' },\r\n                  { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany' },\r\n                  { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland' },\r\n                  { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands' },\r\n                  { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden' },\r\n                  { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain' },\r\n                  { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France' },\r\n                  { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway' },\r\n                  { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom' },\r\n                  { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy' },\r\n                  { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia' },\r\n                  { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States' },\r\n                  { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary' },\r\n                  { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal' },\r\n                  { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand' }\r\n                ]\r\n              }]\r\n            \r\n            }\r\n        }\r\n    \r\n    render() {\r\n\r\n        const createRows = (rows) => {\r\n            let array = []\r\n            for (let i = 1; i < rows.length; i++) {\r\n                for( let j = 0; j < rows[i].length; j++){\r\n                  // eslint-disable-next-line eqeqeq\r\n                  if(rows[i][j] == undefined){\r\n                      rows[i][j] = \" \";\r\n                  }\r\n                }\r\n              array.push(rows[i]); \r\n            }\r\n            return array;\r\n        }\r\n\r\n        const getYears = () => {\r\n          const {json} = this.state;\r\n          let arrayYears = []\r\n          let check = {}\r\n          for (let i = 0; i < json.length; i++) {\r\n            if(!check[json[i]['Year']]){\r\n              check[json[i]['Year']] = true;\r\n              arrayYears.push(json[i]['Year'])\r\n            }\r\n            \r\n          }\r\n          return(arrayYears)\r\n        }\r\n\r\n        const getCountries = (array) => {\r\n          let arrayCountries = []\r\n          let check = {}\r\n          for (let i = 0; i < array.length; i++) {\r\n            if(!check[array[i]['ReporterName']]){\r\n              check[array[i]['ReporterName']] = true;\r\n              arrayCountries.push(array[i]['ReporterName'])\r\n            }\r\n            \r\n          }\r\n          return(arrayCountries)\r\n        }\r\n\r\n      const readExcel = (file) => {\r\n          //const [excel,setExcel] = useState('');\r\n          //const [columns, setColumns] = useState(true);\r\n          const reader = new FileReader();\r\n          reader.readAsBinaryString(file);\r\n          reader.onload = (e) => {\r\n              const bstr = e.target.result;\r\n              const wb = XLSX.read(bstr, {type: 'binary'});\r\n              const wsname = wb.SheetNames[0];\r\n              const ws = wb.Sheets[wsname];\r\n              const forRows = XLSX.utils.sheet_to_json(ws, {header:1});\r\n              const forWork = XLSX.utils.sheet_to_json(ws);\r\n              this.setState({cols:forRows[0]});\r\n              const rows = createRows(forRows);\r\n              this.setState({rows:rows})\r\n              this.setState({json:forWork})\r\n              this.setState({years: getYears()})\r\n              //setColumns(cols);\r\n              //console.log(forWork,\"For Work\");\r\n              //console.log(forColumns,\"For Columns\");\r\n          }   \r\n        }\r\n\r\n      const isMA = (element, average) => {\r\n          if(element >= average){\r\n            return 1;\r\n          }\r\n          else {\r\n            return 0;\r\n          }\r\n      }\r\n\r\n      const makeImpacto = (year) => {\r\n        const {json} = this.state;\r\n        let dataImpacto = [];\r\n        let grandTotal = 0;\r\n        let impacto = [];\r\n        let columns = [];\r\n        let average = 0;\r\n\r\n\r\n\r\n        for (let i = 0; i < json.length; i++) {\r\n          if(json[i]['Year'] === year && json[i]['TradeFlowName'] === 'Import' && json[i]['PartnerName'] === \" World\"){\r\n            dataImpacto.push(json[i])\r\n            grandTotal += parseFloat(json[i]['TradeValue in 1000 USD'])\r\n          }\r\n        }\r\n\r\n        for(let i = 0; i < dataImpacto.length; i++){\r\n          average +=  ((parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100)/dataImpacto.length            \r\n        }\r\n\r\n        for (let i = 0; i < dataImpacto.length; i++) {\r\n          impacto.push([dataImpacto[i]['ReporterISO3'],\r\n                        dataImpacto[i]['ReporterName'],\r\n                        parseFloat(dataImpacto[i]['TradeValue in 1000 USD']),\r\n                        parseFloat(dataImpacto[i]['NetWeight in KGM']),\r\n                        (parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100,\r\n                        isMA((parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100, average)\r\n                      ])\r\n        }\r\n\r\n        columns = [\"Reporter ISO3\",\"ReporterName\",\"Suma de TradeValue in 1000 USD\", 'NetWeight in KGM', \"Impacto\", \"Mercado Atractivo?\"]\r\n    \r\n       //console.log(impacto.length)\r\n       //console.log(impacto)\r\n       \r\n        this.setState({columns})\r\n        this.setState({impacto})\r\n        \r\n      }\r\n\r\n      const exportImpactoExcel = () => {\r\n        let totalArray = [];\r\n        const {columns, impacto} = this.state;\r\n          totalArray.push([columns[0],columns[1],columns[2],columns[3],columns[4],columns[5]])   \r\n        for (let i = 0; i < impacto.length; i++) {\r\n          totalArray.push(impacto[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n         XLSX.utils.book_append_sheet(wb, wsAll, \"Impacto\")\r\n         XLSX.writeFile(wb, \"Impacto.xlsx\")\r\n      }\r\n\r\n      const makeBalanza = (year) => {\r\n        const {json} = this.state;\r\n        let dataBalanza = [];\r\n        let balanza = [];\r\n        let countries = [];\r\n        let columnsBalanza = [];\r\n\r\n        for (let i = 0; i < json.length; i++) {\r\n          if(json[i]['Year'] === year  && json[i]['PartnerName'] === \" World\"){\r\n            dataBalanza.push(json[i])\r\n          }\r\n        }\r\n        countries = getCountries(dataBalanza)\r\n\r\n        for (let j = 0; j < countries.length; j++) { \r\n          let ischeck = false;\r\n          for (let i = 0; i < dataBalanza.length; i++) {\r\n            if(countries[j] === dataBalanza[i]['ReporterName'] ){\r\n              if(dataBalanza[i]['TradeFlowName'] === 'Export'){\r\n                ischeck = true;\r\n                balanza.push([dataBalanza[i]['ReporterISO3'],\r\n                            countries[j],\r\n                          ])\r\n              }\r\n              if(!ischeck && dataBalanza[i]['TradeFlowName'] === 'Import'){\r\n                balanza.push([dataBalanza[i]['ReporterISO3'],\r\n                countries[j],\r\n              ])\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          for (let j = 0; j < dataBalanza.length; j++) {\r\n            //console.log(balanza[i][1])\r\n            if(balanza[i][1] === dataBalanza[j]['ReporterName'] && dataBalanza[j]['TradeFlowName'] === 'Export'){\r\n              balanza[i].push(parseFloat(dataBalanza[j]['TradeValue in 1000 USD']))\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          if(balanza[i][2] === undefined){\r\n            balanza[i][2] = 0\r\n          }    \r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          for (let j = 0; j < dataBalanza.length; j++) {\r\n            //console.log(balanza[i][1])\r\n            if(balanza[i][1] === dataBalanza[j]['ReporterName'] && dataBalanza[j]['TradeFlowName'] === 'Import'){\r\n              balanza[i].push(parseFloat(dataBalanza[j]['TradeValue in 1000 USD']))\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          if(balanza[i][3] === undefined){\r\n            balanza[i][3] = 0\r\n          }    \r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          balanza[i].push((balanza[i][2] - balanza[i][3])*1000)\r\n          if(balanza[i][4] < 0){\r\n            balanza[i].push(1)\r\n          }\r\n          else{\r\n            balanza[i].push(0)\r\n          }\r\n        }\r\n        columnsBalanza = ['Reporter ISO3', 'ReporterName', 'Export', 'Import', 'Balanza Comercial', 'Mercado Atractivo?']\r\n        this.setState({balanza})\r\n        this.setState({columnsBalanza})\r\n\r\n\r\n      }\r\n\r\n      const exportBalanzaExcel = () => {\r\n        let totalArray = [];\r\n        const {columnsBalanza, balanza} = this.state;\r\n          totalArray.push([columnsBalanza[0],columnsBalanza[1],columnsBalanza[2],columnsBalanza[3],columnsBalanza[4],columnsBalanza[5]])   \r\n        for (let i = 0; i < balanza.length; i++) {\r\n          totalArray.push(balanza[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n         XLSX.utils.book_append_sheet(wb, wsAll, \"Balanza\")\r\n         XLSX.writeFile(wb, \"BalanzaComercial.xlsx\")\r\n      }\r\n\r\n     const makeIDI = () => {\r\n       const {impacto, balanza} = this.state;\r\n       //console.log(impacto, \"IMPACTO\")\r\n       //console.log(balanza, \"BALANZA\")\r\n       let columnsIDI1 = [];\r\n       let columnsIDI2 = [];\r\n       let maxImpacto = -999999999999;\r\n       let minImpacto = 999999999999;\r\n       let maxBalanza = -999999999999;\r\n       let minBalanza = 999999999999;\r\n       let idi1 = [];\r\n       let idi2 = [];\r\n       let dataTable = [];\r\n       let kgAndValueIDI1 = []\r\n       let avgP;\r\n       let avgT;\r\n       let totalP = 0;\r\n       let totalT = 0;\r\n       let options = {}; \r\n\r\n       for (let i = 0; i < impacto.length; i++) {\r\n         if(impacto[i][5] === 1 && balanza[i][5] === 1){\r\n           idi1.push([impacto[i][0],impacto[i][1],impacto[i][4],balanza[i][4]])\r\n           idi2.push([impacto[i][0],impacto[i][1]])\r\n           kgAndValueIDI1.push([impacto[i][3],impacto[i][2]])\r\n           if(maxImpacto < impacto[i][4]){\r\n              maxImpacto = impacto[i][4];\r\n           }\r\n           if(minImpacto > impacto[i][4]){\r\n            minImpacto = impacto[i][4];\r\n           }\r\n           if(maxBalanza < balanza[i][4]){\r\n            maxBalanza = balanza[i][4];\r\n           }\r\n           if(minBalanza > balanza[i][4]){\r\n            minBalanza= balanza[i][4];\r\n           }\r\n         }  \r\n       }\r\n\r\n       for (let i = 0; i < idi1.length; i++) {\r\n         idi1[i].push((idi1[i][2] - minImpacto)/(maxImpacto - minImpacto),\r\n          (idi1[i][3] - maxBalanza)/(minBalanza - maxBalanza))\r\n         \r\n       }\r\n\r\n       columnsIDI1 = ['Reporter ISO3', 'ReporterName', 'Impacto', 'Balanza Comercial', 'Impacto Estandarizado', 'Balanza Estandarizada']\r\n\r\n       this.setState({idi1})\r\n       this.setState({columnsIDI1})\r\n       //console.log(kgAndValueIDI1)\r\n       for (let i = 0; i< idi2.length; i++) {\r\n        idi2[i].push((idi1[i][4] + idi1[i][5])/2, kgAndValueIDI1[i][0], kgAndValueIDI1[i][0]/1000, kgAndValueIDI1[i][1], (kgAndValueIDI1[i][1] * 1000)/(kgAndValueIDI1[i][0]/1000))\r\n        totalT += kgAndValueIDI1[i][0]/1000\r\n        totalP += (kgAndValueIDI1[i][1] * 1000)/(kgAndValueIDI1[i][0]/1000)\r\n       }\r\n\r\n       for (let i = 0; i < idi2.length; i++) {\r\n          dataTable.push({country: idi2[i][1], x: idi2[i][4], y: idi2[i][6]})\r\n       }\r\n       console.log(dataTable)\r\n       avgT = totalT/idi2.length\r\n       avgP = totalP/idi2.length\r\n\r\n       columnsIDI2 = ['Reporter ISO3', 'ReporterName','IDI','Cantidad en Kg', 'Cantidad en toneladas', 'Valor Importado MUSD', 'Precio Unitario (US$/t)']\r\n\r\n       options = {\r\n        chart: {\r\n          type: 'bubble',\r\n          plotBorderWidth: 1,\r\n          zoomType: 'xy'\r\n        },\r\n      \r\n        legend: {\r\n          enabled: false\r\n        },\r\n      \r\n        title: {\r\n          text: 'Indice de Dependencia Importadora(IDI)'\r\n        },\r\n      \r\n        subtitle: {\r\n          text: 'Hecho por:<a href=\"https://ivaldes8.github.io/miPortafolio/\">Iván González</a> y <a href=\"http://www.disaic.cu/\">la Casa Consultora DISAIC</a>'\r\n        },\r\n      \r\n        accessibility: {\r\n          point: {\r\n            valueDescriptionFormat: '{index}. {point.name}, Valor: {point.x}g, Cantidad: {point.y}g, Mercado: {point.z}%.'\r\n          }\r\n        },\r\n      \r\n        xAxis: {\r\n          gridLineWidth: 1,\r\n          title: {\r\n            text: 'Cantidad Importada'\r\n          },\r\n          labels: {\r\n            format: '{value} u'\r\n          },\r\n          plotLines: [{\r\n            color: 'black',\r\n            dashStyle: 'dot',\r\n            width: 3,\r\n            value: avgT,\r\n            label: {\r\n              rotation: 0,\r\n              y: 15,\r\n              style: {\r\n                fontStyle: 'italic'\r\n              },\r\n              //text: 'Safe fat intake 65g/day'\r\n            },\r\n            zIndex: 3\r\n          }],\r\n          //accessibility: {\r\n           //rangeDescription: 'Range: 60 to 100 grams.'\r\n          //}\r\n        },\r\n      \r\n        yAxis: {\r\n          startOnTick: false,\r\n          endOnTick: false,\r\n          title: {\r\n            text: 'Valor Unitario()US$/t'\r\n          },\r\n          labels: {\r\n            format: '{value} US$'\r\n          },\r\n          maxPadding: 0.2,\r\n          plotLines: [{\r\n            color: 'black',\r\n            dashStyle: 'dot',\r\n            width: 3,\r\n            value: avgP,\r\n            label: {\r\n              align: 'right',\r\n              style: {\r\n                fontStyle: 'italic'\r\n              },\r\n              //text: 'Safe sugar intake 50g/day',\r\n              x: -10\r\n            },\r\n            zIndex: 3\r\n          }],\r\n          //accessibility: {\r\n            //rangeDescription: 'Range: 0 to 160 grams.'\r\n          //}\r\n       },\r\n       tooltip: {\r\n        useHTML: true,\r\n        headerFormat: '<table>',\r\n        pointFormat: '<tr><th colspan=\"2\"><h3>{point.country}</h3></th></tr>' +\r\n          '<tr><th>Cantidad:</th><td>{point.x}u</td></tr>' +\r\n          '<tr><th>Valor:</th><td>{point.y}$</td></tr>',\r\n        footerFormat: '</table>',\r\n        followPointer: true\r\n      },\r\n      plotOptions: {\r\n        series: {\r\n          dataLabels: {\r\n            enabled: true,\r\n            format: '{point.country}'\r\n          }\r\n        }\r\n      },\r\n      series: [{\r\n        data: dataTable\r\n      }]\r\n    \r\n      }\r\n\r\n       this.setState({avgT})\r\n       this.setState({avgP})\r\n       this.setState({columnsIDI2})\r\n       this.setState({idi2})\r\n       console.log(idi2)\r\n       this.setState({options})\r\n\r\n     }\r\n\r\n     const exportIDIExcel = () => {\r\n      let totalArray1 = [];\r\n      let totalArray2= [];\r\n      const {columnsIDI1, columnsIDI2, idi1, idi2} = this.state;\r\n        totalArray1.push([columnsIDI1[0],columnsIDI1[1],columnsIDI1[2],columnsIDI1[3],columnsIDI1[4],columnsIDI1[5]])  \r\n        totalArray2.push([columnsIDI2[0],columnsIDI2[1],columnsIDI2[2],columnsIDI2[3],columnsIDI2[4],columnsIDI2[5],columnsIDI2[6]])    \r\n      for (let i = 0; i < idi1.length; i++) {\r\n        totalArray1.push(idi1[i]);\r\n      }\r\n      for (let i = 0; i < idi2.length; i++) {\r\n        totalArray2.push(idi2[i]);\r\n      }\r\n      const wb = XLSX.utils.book_new()\r\n      const wsAll = XLSX.utils.aoa_to_sheet(totalArray1)\r\n      const wsAll2 = XLSX.utils.aoa_to_sheet(totalArray2)\r\n       XLSX.utils.book_append_sheet(wb, wsAll, \"IDI1\")\r\n       XLSX.utils.book_append_sheet(wb, wsAll2, \"IDI2\")\r\n       XLSX.writeFile(wb, \"IDI.xlsx\")\r\n     }\r\n\r\n     const exportAllExcel = () => {\r\n      let totalArray = [];\r\n      let totalArray2 = [];\r\n      let totalArray3 = [];\r\n      let totalArray4 = [];\r\n        const {columns, columnsBalanza, columnsIDI1, columnsIDI2, impacto, balanza, idi1 , idi2} = this.state;\r\n          totalArray.push([columns[0],columns[1],columns[2],columns[3],columns[4],columnsBalanza[5]])  \r\n          totalArray2.push([columnsBalanza[0],columnsBalanza[1],columnsBalanza[2],columnsBalanza[3],columnsBalanza[4],columnsBalanza[5]])\r\n          totalArray3.push([columnsIDI1[0],columnsIDI1[1],columnsIDI1[2],columnsIDI1[3],columnsIDI1[4],columnsIDI1[5]])  \r\n          totalArray4.push([columnsIDI2[0],columnsIDI2[1],columnsIDI2[2],columnsIDI2[3],columnsIDI2[4],columnsIDI2[5],columnsIDI2[6]]) \r\n        for (let i = 0; i < impacto.length; i++) {\r\n          totalArray.push(impacto[i]);\r\n        }\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          totalArray2.push(balanza[i]);\r\n        }\r\n        for (let i = 0; i < idi1.length; i++) {\r\n          totalArray3.push(idi1[i]);\r\n        }\r\n        for (let i = 0; i < idi2.length; i++) {\r\n          totalArray4.push(idi2[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n        XLSX.utils.book_append_sheet(wb, wsAll, \"impacto\")\r\n        const wsAll2 = XLSX.utils.aoa_to_sheet(totalArray2)\r\n        XLSX.utils.book_append_sheet(wb, wsAll2, \"Balanza\")\r\n        const wsAll3 = XLSX.utils.aoa_to_sheet(totalArray3)\r\n        XLSX.utils.book_append_sheet(wb, wsAll3, \"IDI1\")\r\n        const wsAll4 = XLSX.utils.aoa_to_sheet(totalArray4)\r\n        XLSX.utils.book_append_sheet(wb, wsAll4, \"IDI2\")\r\n         XLSX.writeFile(wb, \"Indice de Dependencia Importadora.xlsx\")\r\n      }\r\n\r\n        return (\r\n            <div> \r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        Generador de Indice de Dependencia Importadora\r\n                    </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <hr/> \r\n                <input accept = \".xlsx\" type=\"file\" id=\"contained-button-file\" \r\n                    onChange = {(e) => {\r\n                                const file = e.target.files[0];\r\n                                readExcel(file);\r\n                    }}/>\r\n                <hr/>                \r\n                <hr/>\r\n                {this.state.rows.length? \r\n                    <div>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\"\r\n                            >\r\n                            <Typography>Impacto</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                  <label>Select a year:</label>\r\n                                  <select name=\"years\" id=\"years\"\r\n                                    onChange = {(e) => {\r\n                                      makeImpacto(e.target.value)\r\n                                    }}\r\n                                  >\r\n                                    {this.state.years.map((item, index) => (\r\n                                      <option value={item} key = {index}>{item}</option>\r\n                                    ))}\r\n                                  </select>\r\n                              {this.state.impacto.length > 0 &&\r\n                                <div>\r\n                                  <button onClick = {() => exportImpactoExcel()}>Descargar Impacto en Excel</button>\r\n                                  <TableContainer>\r\n                                  <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                      {this.state.columns.map((item,index) => (\r\n                                        <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                      ))}\r\n                                    </TableRow> \r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {this.state.impacto.map((item,index) => (\r\n                                        <TableRow key = {index}>\r\n                                          {item.map((item2,index2) => (\r\n                                              <TableCell key = {index2}>{item2}</TableCell>\r\n                                          ))}\r\n                                        </TableRow> \r\n                                      ))}  \r\n                                    </TableBody>\r\n                                  </Table>\r\n                                  </TableContainer>\r\n                                </div>\r\n                              } \r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>Balanza Comercial</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                              <label>Select a year:</label>\r\n                                  <select name=\"years\" id=\"years\"\r\n                                    onChange = {(e) => {\r\n                                      makeBalanza(e.target.value)\r\n                                    }}\r\n                                  >\r\n                                    {this.state.years.map((item, index) => (\r\n                                      <option value={item} key = {index}>{item}</option>\r\n                                    ))}\r\n                                  </select>\r\n                              {this.state.balanza.length > 0 && \r\n                              <div>\r\n                                <button onClick = {() => exportBalanzaExcel()}>Descargar Balanza en Excel</button>\r\n                                <TableContainer>\r\n                                  <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                      {this.state.columnsBalanza.map((item,index) => (\r\n                                        <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                      ))}\r\n                                    </TableRow> \r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {this.state.balanza.map((item,index) => (\r\n                                        <TableRow key = {index}>\r\n                                          {item.map((item2,index2) => (\r\n                                              <TableCell key = {index2}>{item2}</TableCell>\r\n                                          ))}\r\n                                        </TableRow> \r\n                                      ))}  \r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              </div>\r\n                              }\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        { this.state.balanza.length > 0 && this.state.impacto.length > 0 && \r\n                        <Accordion>\r\n                          <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>ïndice de Dependencia Importadora</Typography>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                            <button onClick = {() => makeIDI()}>Calcular IDI</button>\r\n                            <br/>\r\n                            {this.state.idi1.length > 0 &&\r\n                            <div>\r\n                               <button onClick = {() => exportIDIExcel()}>Descargar IDI en excel</button>\r\n                               <button onClick = {() => exportAllExcel()}>Descargar Todo menos el gráfico en un solo excel</button>\r\n                            </div>  \r\n                            }\r\n                           \r\n                            {this.state.idi1.length > 0 && \r\n                            <div>\r\n                              <TableContainer>\r\n                                <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                  <TableHead>\r\n                                  <TableRow>\r\n                                    {this.state.columnsIDI1.map((item,index) => (\r\n                                      <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                    ))}\r\n                                  </TableRow> \r\n                                  </TableHead>\r\n                                  <TableBody>\r\n                                    {this.state.idi1.map((item,index) => (\r\n                                      <TableRow key = {index}>\r\n                                        {item.map((item2,index2) => (\r\n                                            <TableCell key = {index2}>{item2}</TableCell>\r\n                                        ))}\r\n                                      </TableRow> \r\n                                    ))}  \r\n                                  </TableBody>\r\n                                </Table>\r\n                              </TableContainer>\r\n                              <br/>\r\n                              <hr/>\r\n                              <br/>\r\n                              <TableContainer>\r\n                                <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                  <TableHead>\r\n                                  <TableRow>\r\n                                    {this.state.columnsIDI2.map((item,index) => (\r\n                                      <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                    ))}\r\n                                  </TableRow> \r\n                                  </TableHead>\r\n                                  <TableBody>\r\n                                    {this.state.idi2.map((item,index) => (\r\n                                      <TableRow key = {index}>\r\n                                        {item.map((item2,index2) => (\r\n                                            <TableCell key = {index2}>{item2}</TableCell>\r\n                                        ))}\r\n                                      </TableRow> \r\n                                    ))}  \r\n                                  </TableBody>\r\n                                </Table>\r\n                              </TableContainer>\r\n                            </div>\r\n                            }\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                        }\r\n                        {this.state.idi1.length > 0 && \r\n                        <Accordion>\r\n                          <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>Gráfico</Typography>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                           <Chart options={this.state.options} highcharts={Highcharts} />\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                        }\r\n                    </div>\r\n                : null}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default index;","import './App.css';\nimport IDI from './idi';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IDI/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}