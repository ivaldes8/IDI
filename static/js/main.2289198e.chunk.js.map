{"version":3,"sources":["idi/grafico/index.js","idi/index.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","options","highcharts","constructorType","require","Highcharts","index","props","state","cols","rows","json","years","columns","selectedYear","impacto","balanza","columnsBalanza","idi1","columnsIDI1","idi2","columnsIDI2","avgT","avgP","value","getYears","arrayYears","check","i","length","push","isMA","element","average","AppBar","position","Toolbar","Typography","variant","accept","type","id","onChange","e","file","reader","FileReader","readAsBinaryString","onload","bstr","target","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","forRows","utils","sheet_to_json","header","forWork","setState","array","j","undefined","createRows","readExcel","files","this","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","name","year","dataImpacto","grandTotal","parseFloat","makeImpacto","map","item","onClick","totalArray","book_new","wsAll","aoa_to_sheet","book_append_sheet","writeFile","exportImpactoExcel","TableContainer","Table","stickyHeader","size","aria-label","TableHead","TableRow","TableCell","component","TableBody","item2","index2","countries","dataBalanza","arrayCountries","getCountries","ischeck","arrayBalanza","getBalanza","makeBalanza","exportBalanzaExcel","maxImpacto","minImpacto","maxBalanza","minBalanza","dataTable","kgAndValueIDI1","totalP","totalT","country","x","y","chart","plotBorderWidth","zoomType","legend","enabled","title","text","subtitle","accessibility","point","valueDescriptionFormat","xAxis","gridLineWidth","labels","format","plotLines","color","dashStyle","width","label","rotation","style","fontStyle","zIndex","yAxis","startOnTick","endOnTick","maxPadding","align","tooltip","useHTML","headerFormat","pointFormat","footerFormat","followPointer","plotOptions","series","dataLabels","data","makeIDI","totalArray1","totalArray2","wsAll2","exportIDIExcel","totalArray3","totalArray4","wsAll3","wsAll4","exportAllExcel","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2289198e.chunk.js","sourcesContent":["import React from 'react'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nconst Chart = ({ options, highcharts }) => <HighchartsReact\r\n  highcharts={highcharts}\r\n  constructorType={'chart'}\r\n  options={options}\r\n/>\r\nexport default Chart","import React, { Component } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Highcharts from 'highcharts/highstock'\r\nimport Chart from './grafico';\r\n\r\n// Load Highcharts modules\r\nrequire('highcharts/indicators/indicators')(Highcharts)\r\nrequire('highcharts/indicators/pivot-points')(Highcharts)\r\nrequire('highcharts/indicators/macd')(Highcharts)\r\nrequire('highcharts/modules/exporting')(Highcharts)\r\nrequire('highcharts/modules/map')(Highcharts)\r\n\r\nclass index extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cols:[],\r\n            rows:[],\r\n            json:[],\r\n            years:[],\r\n            columns:[],\r\n            selectedYear:'',\r\n            impacto:[],\r\n            balanza:[],\r\n            columnsBalanza:[],\r\n            idi1:[],\r\n            columnsIDI1:[],\r\n            idi2:[],\r\n            columnsIDI2:[],\r\n            avgT : 0,\r\n            avgP : 0,\r\n            value:0,\r\n            options: {},\r\n        }}\r\n    \r\n    render(){\r\n\r\n        const createRows = (rows) => {\r\n            let array = []\r\n            for (let i = 1; i < rows.length; i++) {\r\n                for( let j = 0; j < rows[i].length; j++){\r\n                  // eslint-disable-next-line eqeqeq\r\n                  if(rows[i][j] == undefined){\r\n                      rows[i][j] = \" \";\r\n                  }\r\n                }\r\n              array.push(rows[i]); \r\n            }\r\n            return array;\r\n        }\r\n\r\n        const getYears = () => {\r\n          const {json} = this.state;\r\n          let arrayYears = []\r\n          let check = {}\r\n          for (let i = 0; i < json.length; i++) {\r\n            if(!check[json[i]['Year']]){\r\n              check[json[i]['Year']] = true;\r\n              arrayYears.push(json[i]['Year'])\r\n            }\r\n            \r\n          }\r\n          return(arrayYears)\r\n        }\r\n\r\n        const getBalanza = (balanza) => {\r\n          let arrayBalanza = []\r\n          let check = {}\r\n          for (let i = 0; i < balanza.length; i++) {\r\n            if(!check[balanza[i][1]]){\r\n              check[balanza[i][1]] = true;\r\n              arrayBalanza.push(balanza[i])\r\n            }\r\n            \r\n          }\r\n          return(arrayBalanza)\r\n        }\r\n\r\n        const getCountries = (array) => {\r\n          let arrayCountries = []\r\n          let check = {}\r\n          for (let i = 0; i < array.length; i++) {\r\n            if(!check[array[i]['ReporterName']]){\r\n              check[array[i]['ReporterName']] = true;\r\n              arrayCountries.push(array[i]['ReporterName'])\r\n            }\r\n            \r\n          }\r\n          return(arrayCountries)\r\n        }\r\n\r\n      const readExcel = (file) => {\r\n          //const [excel,setExcel] = useState('');\r\n          //const [columns, setColumns] = useState(true);\r\n          const reader = new FileReader();\r\n          reader.readAsBinaryString(file);\r\n          reader.onload = (e) => {\r\n              const bstr = e.target.result;\r\n              const wb = XLSX.read(bstr, {type: 'binary'});\r\n              const wsname = wb.SheetNames[0];\r\n              const ws = wb.Sheets[wsname];\r\n              const forRows = XLSX.utils.sheet_to_json(ws, {header:1});\r\n              const forWork = XLSX.utils.sheet_to_json(ws);\r\n              this.setState({cols:forRows[0]});\r\n              const rows = createRows(forRows);\r\n              this.setState({rows:rows})\r\n              this.setState({json:forWork})\r\n              this.setState({years: getYears()})\r\n              //setColumns(cols);\r\n              //console.log(forWork,\"For Work\");\r\n              //console.log(forColumns,\"For Columns\");\r\n          }   \r\n        }\r\n\r\n      const isMA = (element, average) => {\r\n          if(element >= average){\r\n            return 1;\r\n          }\r\n          else {\r\n            return 0;\r\n          }\r\n      }\r\n\r\n      const makeImpacto = (year) => {\r\n        const {json} = this.state;\r\n        let dataImpacto = [];\r\n        let grandTotal = 0;\r\n        let impacto = [];\r\n        let columns = [];\r\n        let average = 0;\r\n\r\n\r\n\r\n        for (let i = 0; i < json.length; i++) {\r\n          if(json[i]['Year'] == year && json[i]['TradeFlowName'] === 'Import' && json[i]['PartnerName'] === \" World\"){\r\n            dataImpacto.push(json[i])\r\n            grandTotal += parseFloat(json[i]['TradeValue in 1000 USD'])\r\n          }\r\n        }\r\n\r\n        for(let i = 0; i < dataImpacto.length; i++){\r\n          average +=  ((parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100)/dataImpacto.length            \r\n        }\r\n\r\n        for (let i = 0; i < dataImpacto.length; i++) {\r\n          impacto.push([dataImpacto[i]['ReporterISO3'],\r\n                        dataImpacto[i]['ReporterName'],\r\n                        parseFloat(dataImpacto[i]['TradeValue in 1000 USD']),\r\n                        parseFloat(dataImpacto[i]['NetWeight in KGM']),\r\n                        (parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100,\r\n                        isMA((parseFloat(dataImpacto[i]['TradeValue in 1000 USD']) / grandTotal)*100, average)\r\n                      ])\r\n        }\r\n\r\n        columns = [\"Reporter ISO3\",\"ReporterName\",\"Suma de TradeValue in 1000 USD\", 'NetWeight in KGM', \"Impacto\", \"Mercado Atractivo?\"]\r\n    \r\n       //console.log(impacto.length)\r\n       //console.log(impacto)\r\n       \r\n        this.setState({columns})\r\n        this.setState({impacto})\r\n        \r\n      }\r\n\r\n      const exportImpactoExcel = () => {\r\n        let totalArray = [];\r\n        const {columns, impacto} = this.state;\r\n          totalArray.push([columns[0],columns[1],columns[2],columns[3],columns[4],columns[5]])   \r\n        for (let i = 0; i < impacto.length; i++) {\r\n          totalArray.push(impacto[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n         XLSX.utils.book_append_sheet(wb, wsAll, \"Impacto\")\r\n         XLSX.writeFile(wb, \"Impacto.xlsx\")\r\n      }\r\n\r\n      const makeBalanza = (year) => {\r\n        const {json} = this.state;\r\n        let dataBalanza = [];\r\n        let balanza = [];\r\n        let countries = [];\r\n        let columnsBalanza = [];\r\n\r\n        for (let i = 0; i < json.length; i++) {\r\n          if(json[i]['Year'] == year  && json[i]['PartnerName'] === \" World\"){\r\n            dataBalanza.push(json[i])\r\n          }\r\n        }\r\n        countries = getCountries(dataBalanza)\r\n\r\n        for (let j = 0; j < countries.length; j++) { \r\n          let ischeck = false;\r\n          for (let i = 0; i < dataBalanza.length; i++) {\r\n            if(countries[j] === dataBalanza[i]['ReporterName'] ){\r\n              if(dataBalanza[i]['TradeFlowName'] === 'Export'){\r\n                ischeck = true;\r\n                balanza.push([dataBalanza[i]['ReporterISO3'],\r\n                            countries[j],\r\n                          ])\r\n              }\r\n              if(!ischeck && dataBalanza[i]['TradeFlowName'] === 'Import'){\r\n                balanza.push([dataBalanza[i]['ReporterISO3'],\r\n                countries[j],\r\n              ])\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        balanza = getBalanza(balanza);\r\n        //console.log(auxbalanza)\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          for (let j = 0; j < dataBalanza.length; j++) {\r\n            //console.log(balanza[i][1])\r\n            if(balanza[i][1] === dataBalanza[j]['ReporterName'] && dataBalanza[j]['TradeFlowName'] === 'Export'){\r\n              balanza[i].push(parseFloat(dataBalanza[j]['TradeValue in 1000 USD']))\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          if(balanza[i][2] === undefined){\r\n            balanza[i][2] = 0\r\n          }    \r\n        }\r\n       \r\n        for (let i = 0; i < balanza.length; i++) {\r\n          for (let j = 0; j < dataBalanza.length; j++) {\r\n            //console.log(balanza[i][1])\r\n            if(balanza[i][1] === dataBalanza[j]['ReporterName'] && dataBalanza[j]['TradeFlowName'] === 'Import'){\r\n              balanza[i].push(parseFloat(dataBalanza[j]['TradeValue in 1000 USD']))\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          if(balanza[i][3] === undefined){\r\n            balanza[i][3] = 0\r\n          }    \r\n        }\r\n\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          balanza[i].push((balanza[i][2] - balanza[i][3])*1000)\r\n          if(balanza[i][4] < 0){\r\n            balanza[i].push(1)\r\n          }\r\n          else{\r\n            balanza[i].push(0)\r\n          }\r\n        }\r\n        columnsBalanza = ['Reporter ISO3', 'ReporterName', 'Export', 'Import', 'Balanza Comercial', 'Mercado Atractivo?']\r\n        this.setState({balanza})\r\n        this.setState({columnsBalanza})\r\n\r\n\r\n      }\r\n\r\n      const exportBalanzaExcel = () => {\r\n        let totalArray = [];\r\n        const {columnsBalanza, balanza} = this.state;\r\n          totalArray.push([columnsBalanza[0],columnsBalanza[1],columnsBalanza[2],columnsBalanza[3],columnsBalanza[4],columnsBalanza[5]])   \r\n        for (let i = 0; i < balanza.length; i++) {\r\n          totalArray.push(balanza[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n         XLSX.utils.book_append_sheet(wb, wsAll, \"Balanza\")\r\n         XLSX.writeFile(wb, \"BalanzaComercial.xlsx\")\r\n      }\r\n\r\n     const makeIDI = () => {\r\n       const {impacto, balanza} = this.state;\r\n       //console.log(impacto, \"IMPACTO\")\r\n       //console.log(balanza, \"BALANZA\")\r\n       let columnsIDI1 = [];\r\n       let columnsIDI2 = [];\r\n       let maxImpacto = -999999999999;\r\n       let minImpacto = 999999999999;\r\n       let maxBalanza = -999999999999;\r\n       let minBalanza = 999999999999;\r\n       let idi1 = [];\r\n       let idi2 = [];\r\n       let dataTable = [];\r\n       let kgAndValueIDI1 = []\r\n       let avgP;\r\n       let avgT;\r\n       let totalP = 0;\r\n       let totalT = 0;\r\n       let options = {}; \r\n\r\n       for (let i = 0; i < impacto.length; i++) {\r\n         if(impacto[i][5] === 1 && balanza[i][5] === 1){\r\n           idi1.push([impacto[i][0],impacto[i][1],impacto[i][4],balanza[i][4]])\r\n           idi2.push([impacto[i][0],impacto[i][1]])\r\n           kgAndValueIDI1.push([impacto[i][3],impacto[i][2]])\r\n           if(maxImpacto < impacto[i][4]){\r\n              maxImpacto = impacto[i][4];\r\n           }\r\n           if(minImpacto > impacto[i][4]){\r\n            minImpacto = impacto[i][4];\r\n           }\r\n           if(maxBalanza < balanza[i][4]){\r\n            maxBalanza = balanza[i][4];\r\n           }\r\n           if(minBalanza > balanza[i][4]){\r\n            minBalanza= balanza[i][4];\r\n           }\r\n         }  \r\n       }\r\n\r\n       for (let i = 0; i < idi1.length; i++) {\r\n         idi1[i].push((idi1[i][2] - minImpacto)/(maxImpacto - minImpacto),\r\n          (idi1[i][3] - maxBalanza)/(minBalanza - maxBalanza))\r\n         \r\n       }\r\n\r\n       columnsIDI1 = ['Reporter ISO3', 'ReporterName', 'Impacto', 'Balanza Comercial', 'Impacto Estandarizado', 'Balanza Estandarizada']\r\n\r\n       this.setState({idi1})\r\n       this.setState({columnsIDI1})\r\n       //console.log(kgAndValueIDI1)\r\n       for (let i = 0; i< idi2.length; i++) {\r\n        idi2[i].push((idi1[i][4] + idi1[i][5])/2, kgAndValueIDI1[i][0], kgAndValueIDI1[i][0]/1000, kgAndValueIDI1[i][1], (kgAndValueIDI1[i][1] * 1000)/(kgAndValueIDI1[i][0]/1000))\r\n        totalT += kgAndValueIDI1[i][0]/1000\r\n        totalP += (kgAndValueIDI1[i][1] * 1000)/(kgAndValueIDI1[i][0]/1000)\r\n       }\r\n\r\n       for (let i = 0; i < idi2.length; i++) {\r\n          dataTable.push({country: idi2[i][1], x: idi2[i][4], y: idi2[i][6]})\r\n       }\r\n       avgT = totalT/idi2.length\r\n       avgP = totalP/idi2.length\r\n\r\n       columnsIDI2 = ['Reporter ISO3', 'ReporterName','IDI','Cantidad en Kg', 'Cantidad en toneladas', 'Valor Importado MUSD', 'Precio Unitario (US$/t)']\r\n\r\n       options = {\r\n        chart: {\r\n          type: 'bubble',\r\n          plotBorderWidth: 1,\r\n          zoomType: 'xy'\r\n        },\r\n      \r\n        legend: {\r\n          enabled: false\r\n        },\r\n      \r\n        title: {\r\n          text: 'Indice de Dependencia Importadora(IDI)'\r\n        },\r\n      \r\n        subtitle: {\r\n          text: 'Hecho por:<a href=\"https://ivaldes8.github.io/miPortafolio/\">Iván González</a> y <a href=\"http://www.disaic.cu/\">la Casa Consultora DISAIC</a>'\r\n        },\r\n      \r\n        accessibility: {\r\n          point: {\r\n            valueDescriptionFormat: '{index}. {point.name}, Valor: {point.x}g, Cantidad: {point.y}g, Mercado: {point.z}%.'\r\n          }\r\n        },\r\n      \r\n        xAxis: {\r\n          gridLineWidth: 1,\r\n          title: {\r\n            text: 'Cantidad Importada'\r\n          },\r\n          labels: {\r\n            format: '{value} u'\r\n          },\r\n          plotLines: [{\r\n            color: 'black',\r\n            dashStyle: 'dot',\r\n            width: 3,\r\n            value: avgT,\r\n            label: {\r\n              rotation: 0,\r\n              y: 15,\r\n              style: {\r\n                fontStyle: 'italic'\r\n              },\r\n              //text: 'Safe fat intake 65g/day'\r\n            },\r\n            zIndex: 3\r\n          }],\r\n          //accessibility: {\r\n           //rangeDescription: 'Range: 60 to 100 grams.'\r\n          //}\r\n        },\r\n      \r\n        yAxis: {\r\n          startOnTick: false,\r\n          endOnTick: false,\r\n          title: {\r\n            text: 'Valor Unitario()US$/t'\r\n          },\r\n          labels: {\r\n            format: '{value} US$'\r\n          },\r\n          maxPadding: 0.2,\r\n          plotLines: [{\r\n            color: 'black',\r\n            dashStyle: 'dot',\r\n            width: 3,\r\n            value: avgP,\r\n            label: {\r\n              align: 'right',\r\n              style: {\r\n                fontStyle: 'italic'\r\n              },\r\n              //text: 'Safe sugar intake 50g/day',\r\n              x: -10\r\n            },\r\n            zIndex: 3\r\n          }],\r\n          //accessibility: {\r\n            //rangeDescription: 'Range: 0 to 160 grams.'\r\n          //}\r\n       },\r\n       tooltip: {\r\n        useHTML: true,\r\n        headerFormat: '<table>',\r\n        pointFormat: '<tr><th colspan=\"2\"><h3>{point.country}</h3></th></tr>' +\r\n          '<tr><th>Cantidad:</th><td>{point.x}u</td></tr>' +\r\n          '<tr><th>Valor:</th><td>{point.y}$</td></tr>',\r\n        footerFormat: '</table>',\r\n        followPointer: true\r\n      },\r\n      plotOptions: {\r\n        series: {\r\n          dataLabels: {\r\n            enabled: true,\r\n            format: '{point.country}'\r\n          }\r\n        }\r\n      },\r\n      series: [{\r\n        data: dataTable\r\n      }]\r\n    \r\n      }\r\n\r\n       this.setState({avgT})\r\n       this.setState({avgP})\r\n       this.setState({columnsIDI2})\r\n       this.setState({idi2})\r\n       this.setState({options})\r\n\r\n     }\r\n\r\n     const exportIDIExcel = () => {\r\n      let totalArray1 = [];\r\n      let totalArray2= [];\r\n      const {columnsIDI1, columnsIDI2, idi1, idi2} = this.state;\r\n        totalArray1.push([columnsIDI1[0],columnsIDI1[1],columnsIDI1[2],columnsIDI1[3],columnsIDI1[4],columnsIDI1[5]])  \r\n        totalArray2.push([columnsIDI2[0],columnsIDI2[1],columnsIDI2[2],columnsIDI2[3],columnsIDI2[4],columnsIDI2[5],columnsIDI2[6]])    \r\n      for (let i = 0; i < idi1.length; i++) {\r\n        totalArray1.push(idi1[i]);\r\n      }\r\n      for (let i = 0; i < idi2.length; i++) {\r\n        totalArray2.push(idi2[i]);\r\n      }\r\n      const wb = XLSX.utils.book_new()\r\n      const wsAll = XLSX.utils.aoa_to_sheet(totalArray1)\r\n      const wsAll2 = XLSX.utils.aoa_to_sheet(totalArray2)\r\n       XLSX.utils.book_append_sheet(wb, wsAll, \"IDI1\")\r\n       XLSX.utils.book_append_sheet(wb, wsAll2, \"IDI2\")\r\n       XLSX.writeFile(wb, \"IDI.xlsx\")\r\n     }\r\n\r\n     const exportAllExcel = () => {\r\n      let totalArray = [];\r\n      let totalArray2 = [];\r\n      let totalArray3 = [];\r\n      let totalArray4 = [];\r\n        const {columns, columnsBalanza, columnsIDI1, columnsIDI2, impacto, balanza, idi1 , idi2} = this.state;\r\n          totalArray.push([columns[0],columns[1],columns[2],columns[3],columns[4],columnsBalanza[5]])  \r\n          totalArray2.push([columnsBalanza[0],columnsBalanza[1],columnsBalanza[2],columnsBalanza[3],columnsBalanza[4],columnsBalanza[5]])\r\n          totalArray3.push([columnsIDI1[0],columnsIDI1[1],columnsIDI1[2],columnsIDI1[3],columnsIDI1[4],columnsIDI1[5]])  \r\n          totalArray4.push([columnsIDI2[0],columnsIDI2[1],columnsIDI2[2],columnsIDI2[3],columnsIDI2[4],columnsIDI2[5],columnsIDI2[6]]) \r\n        for (let i = 0; i < impacto.length; i++) {\r\n          totalArray.push(impacto[i]);\r\n        }\r\n        for (let i = 0; i < balanza.length; i++) {\r\n          totalArray2.push(balanza[i]);\r\n        }\r\n        for (let i = 0; i < idi1.length; i++) {\r\n          totalArray3.push(idi1[i]);\r\n        }\r\n        for (let i = 0; i < idi2.length; i++) {\r\n          totalArray4.push(idi2[i]);\r\n        }\r\n        const wb = XLSX.utils.book_new()\r\n\r\n        const wsAll = XLSX.utils.aoa_to_sheet(totalArray)\r\n        XLSX.utils.book_append_sheet(wb, wsAll, \"impacto\")\r\n        const wsAll2 = XLSX.utils.aoa_to_sheet(totalArray2)\r\n        XLSX.utils.book_append_sheet(wb, wsAll2, \"Balanza\")\r\n        const wsAll3 = XLSX.utils.aoa_to_sheet(totalArray3)\r\n        XLSX.utils.book_append_sheet(wb, wsAll3, \"IDI1\")\r\n        const wsAll4 = XLSX.utils.aoa_to_sheet(totalArray4)\r\n        XLSX.utils.book_append_sheet(wb, wsAll4, \"IDI2\")\r\n         XLSX.writeFile(wb, \"Indice de Dependencia Importadora.xlsx\")\r\n      }\r\n\r\n        return (\r\n            <div> \r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        Generador de Indice de Dependencia Importadora\r\n                    </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <hr/> \r\n                <input accept = \".xlsx\" type=\"file\" id=\"contained-button-file\" \r\n                    onChange = {(e) => {\r\n                                const file = e.target.files[0];\r\n                                readExcel(file);\r\n                    }}/>\r\n                <hr/>                \r\n                <hr/>\r\n                {this.state.rows.length? \r\n                    <div>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\"\r\n                            >\r\n                            <Typography>Impacto</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                  <label>Select a year:</label>\r\n                                  <select name=\"years\" id=\"years\"\r\n                                    onChange = {(e) => {\r\n                                      makeImpacto(e.target.value)\r\n                                    }}\r\n                                  >\r\n                                    {this.state.years.map((item, index) => (\r\n                                      <option value={item} key = {index}>{item}</option>\r\n                                    ))}\r\n                                  </select>\r\n                              {this.state.impacto.length > 0 &&\r\n                                <div>\r\n                                  <button onClick = {() => exportImpactoExcel()}>Descargar Impacto en Excel</button>\r\n                                  <TableContainer>\r\n                                  <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                      {this.state.columns.map((item,index) => (\r\n                                        <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                      ))}\r\n                                    </TableRow> \r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {this.state.impacto.map((item,index) => (\r\n                                        <TableRow key = {index}>\r\n                                          {item.map((item2,index2) => (\r\n                                              <TableCell key = {index2}>{item2}</TableCell>\r\n                                          ))}\r\n                                        </TableRow> \r\n                                      ))}  \r\n                                    </TableBody>\r\n                                  </Table>\r\n                                  </TableContainer>\r\n                                </div>\r\n                              } \r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>Balanza Comercial</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                              <label>Select a year:</label>\r\n                                  <select name=\"years\" id=\"years\"\r\n                                    onChange = {(e) => {\r\n                                      makeBalanza(e.target.value)\r\n                                    }}\r\n                                  >\r\n                                    {this.state.years.map((item, index) => (\r\n                                      <option value={item} key = {index}>{item}</option>\r\n                                    ))}\r\n                                  </select>\r\n                              {this.state.balanza.length > 0 && \r\n                              <div>\r\n                                <button onClick = {() => exportBalanzaExcel()}>Descargar Balanza en Excel</button>\r\n                                <TableContainer>\r\n                                  <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                      {this.state.columnsBalanza.map((item,index) => (\r\n                                        <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                      ))}\r\n                                    </TableRow> \r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {this.state.balanza.map((item,index) => (\r\n                                        <TableRow key = {index}>\r\n                                          {item.map((item2,index2) => (\r\n                                              <TableCell key = {index2}>{item2}</TableCell>\r\n                                          ))}\r\n                                        </TableRow> \r\n                                      ))}  \r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              </div>\r\n                              }\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        { this.state.balanza.length > 0 && this.state.impacto.length > 0 && \r\n                        <Accordion>\r\n                          <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>ïndice de Dependencia Importadora</Typography>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                            <button onClick = {() => makeIDI()}>Calcular IDI</button>\r\n                            <br/>\r\n                            {this.state.idi1.length > 0 &&\r\n                            <div>\r\n                               <button onClick = {() => exportIDIExcel()}>Descargar IDI en excel</button>\r\n                               <button onClick = {() => exportAllExcel()}>Descargar Todo menos el gráfico en un solo excel</button>\r\n                            </div>  \r\n                            }\r\n                           \r\n                            {this.state.idi1.length > 0 && \r\n                            <div>\r\n                              <TableContainer>\r\n                                <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                  <TableHead>\r\n                                  <TableRow>\r\n                                    {this.state.columnsIDI1.map((item,index) => (\r\n                                      <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                    ))}\r\n                                  </TableRow> \r\n                                  </TableHead>\r\n                                  <TableBody>\r\n                                    {this.state.idi1.map((item,index) => (\r\n                                      <TableRow key = {index}>\r\n                                        {item.map((item2,index2) => (\r\n                                            <TableCell key = {index2}>{item2}</TableCell>\r\n                                        ))}\r\n                                      </TableRow> \r\n                                    ))}  \r\n                                  </TableBody>\r\n                                </Table>\r\n                              </TableContainer>\r\n                              <br/>\r\n                              <hr/>\r\n                              <br/>\r\n                              <TableContainer>\r\n                                <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                                  <TableHead>\r\n                                  <TableRow>\r\n                                    {this.state.columnsIDI2.map((item,index) => (\r\n                                      <TableCell component=\"th\" key = {index}>{item}</TableCell>\r\n                                    ))}\r\n                                  </TableRow> \r\n                                  </TableHead>\r\n                                  <TableBody>\r\n                                    {this.state.idi2.map((item,index) => (\r\n                                      <TableRow key = {index}>\r\n                                        {item.map((item2,index2) => (\r\n                                            <TableCell key = {index2}>{item2}</TableCell>\r\n                                        ))}\r\n                                      </TableRow> \r\n                                    ))}  \r\n                                  </TableBody>\r\n                                </Table>\r\n                              </TableContainer>\r\n                            </div>\r\n                            }\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                        }\r\n                        {this.state.idi1.length > 0 && \r\n                        <Accordion>\r\n                          <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel2a-content\"\r\n                            id=\"panel2a-header\"\r\n                            >\r\n                            <Typography>Gráfico</Typography>\r\n                          </AccordionSummary>\r\n                          <AccordionDetails>\r\n                           <Chart options={this.state.options} highcharts={Highcharts} />\r\n                          </AccordionDetails>\r\n                        </Accordion>\r\n                        }\r\n                    </div>\r\n                : null}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default index;","import './App.css';\nimport IDI from './idi';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IDI/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}